import discord 
from discord.ext import commands
import logging
from dotenv import load_dotenv
import os
import sys
from datetime import datetime
import asyncio
from typing import Optional
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler


# Load environment variables
load_dotenv()
token = os.getenv("DISCORD_TOKEN")

if not token:
    print("L·ªói: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN. T·∫°o file .env v·ªõi DISCORD_TOKEN=token_c·ªßa_b·∫°n v√† kh·ªüi ƒë·ªông l·∫°i bot.")
    sys.exit(1)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('discord.log', encoding='utf-8', mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('HDBadminton')

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

# Emoji mapping for polls (supports up to 10 options)
POLL_EMOJIS = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']

# Admin check decorator
def is_admin():
    async def predicate(ctx):
        return ctx.author.guild_permissions.administrator or ctx.author.guild_permissions.manage_messages
    return commands.check(predicate)

# Error handler
async def handle_error(ctx, error, command_name):
    """X·ª≠ l√Ω l·ªói t·∫≠p trung"""
    logger.error(f"L·ªói trong l·ªánh {command_name}: {error}")
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c√∫ ph√°p l·ªánh.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå Thi·∫øu tham s·ªë b·∫Øt bu·ªôc cho l·ªánh `{command_name}`.")
    else:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh: {str(error)}")

# Bot events
@bot.event
async def on_ready():
    logger.info(f'Bot HDBadminton ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n {bot.user.name} (ID: {bot.user.id})') # type: ignore
    print(f'‚úÖ Bot HDBadminton ƒë√£ s·∫µn s√†ng! ƒêƒÉng nh·∫≠p v·ªõi t√™n {bot.user.name}') # type: ignore
    
    # ƒê·∫∑t tr·∫°ng th√°i bot
    activity = discord.Activity(type=discord.ActivityType.watching, name="c√°c tr·∫≠n c·∫ßu l√¥ng üè∏")
    await bot.change_presence(activity=activity)

@bot.event
async def on_command_error(ctx, error):
    """Global error handler"""
    if isinstance(error, commands.CommandNotFound):
        return  # Ignore command not found errors
    
    await handle_error(ctx, error, ctx.command.name if ctx.command else "unknown")

@bot.event
async def on_message(message):
    """Ghi log tin nh·∫Øn v√† x·ª≠ l√Ω l·ªánh"""
    if message.author == bot.user:
        return
    
    # Ghi log ho·∫°t ƒë·ªông tin nh·∫Øn
    logger.info(f"Tin nh·∫Øn t·ª´ {message.author} trong #{message.channel}: {message.content[:100]}...")
    
    await bot.process_commands(message)

# Commands
@bot.command(name='announce', aliases=['thongbao'], help='ƒêƒÉng th√¥ng b√°o (Ch·ªâ Admin)')
@is_admin()
async def announce(ctx, *, message: str):
    """
    T·∫°o th√¥ng b√°o v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫∑c bi·ªát
    C√°ch d√πng: !announce N·ªôi dung th√¥ng b√°o c·ªßa b·∫°n ·ªü ƒë√¢y
    """
    try:
        # X√≥a tin nh·∫Øn l·ªánh
        await ctx.message.delete()
        
        # T·∫°o embed th√¥ng b√°o
        embed = discord.Embed(
            title="üì¢ Th√¥ng B√°o HDBadminton",
            description=message,
            color=0x00ff00,
            timestamp=datetime.utcnow()
        )
        embed.set_footer(text=f"Th√¥ng b√°o b·ªüi {ctx.author.display_name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
        
        # G·ª≠i th√¥ng b√°o
        announcement_msg = await ctx.send("@everyone", embed=embed)
        
        # Th√™m ph·∫£n ·ª©ng x√°c nh·∫≠n
        await announcement_msg.add_reaction('‚úÖ')
        
        logger.info(f"Th√¥ng b√°o ƒë∆∞·ª£c ƒëƒÉng b·ªüi {ctx.author} trong #{ctx.channel}")
        
    except Exception as e:
        await handle_error(ctx, e, "announce")

@bot.command(name='vote', aliases=['poll', 'binhchon'], help='T·∫°o cu·ªôc b√¨nh ch·ªçn v·ªõi nhi·ªÅu l·ª±a ch·ªçn')
async def vote(ctx, title: str, description: Optional[str] = None, *options):
    """
    T·∫°o cu·ªôc b√¨nh ch·ªçn v·ªõi ph·∫£n ·ª©ng emoji (Phi√™n b·∫£n n√¢ng cao cho HDBadminton)
    C√°ch d√πng: !vote "Ti√™u ƒë·ªÅ" "M√¥ t·∫£ (t√πy ch·ªçn)" "L·ª±a ch·ªçn 1" "L·ª±a ch·ªçn 2" "L·ª±a ch·ªçn 3"
    """
    try:
        # N·∫øu ch·ªâ c√≥ 2 tham s·ªë, coi tham s·ªë th·ª© 2 l√† l·ª±a ch·ªçn ƒë·∫ßu ti√™n
        if description and len(options) == 0:
            options = (description,)
            description = None
        elif description and len(options) >= 1:
            options = (description,) + options
            description = None
        
        if len(options) < 2:
            await ctx.send("‚ùå B·∫°n c·∫ßn √≠t nh·∫•t 2 l·ª±a ch·ªçn cho cu·ªôc b√¨nh ch·ªçn!")
            return
        
        if len(options) > 10:
            await ctx.send("‚ùå T·ªëi ƒëa 10 l·ª±a ch·ªçn ƒë∆∞·ª£c ph√©p!")
            return
        
        # X√≥a tin nh·∫Øn l·ªánh
        await ctx.message.delete()
        
        # T·∫°o embed b√¨nh ch·ªçn v·ªõi phong c√°ch ti·∫øng Vi·ªát
        embed = discord.Embed(
            title=f"üó≥Ô∏è {title}",
            color=0x3498db,
            timestamp=datetime.utcnow()
        )
        
        # Th√™m m√¥ t·∫£ n·∫øu c√≥
        if description:
            embed.add_field(name="üìã Th√¥ng tin:", value=description, inline=False)
        
        # Th√™m c√°c l·ª±a ch·ªçn v√†o embed
        option_text = ""
        for i, option in enumerate(options):
            option_text += f"{POLL_EMOJIS[i]} {option}\n"
        
        embed.add_field(name="üè∏ C√°c l·ª±a ch·ªçn:", value=option_text, inline=False)
        embed.add_field(name="‚ÑπÔ∏è H∆∞·ªõng d·∫´n:", value="Nh·∫•n v√†o emoji t∆∞∆°ng ·ª©ng ƒë·ªÉ b√¨nh ch·ªçn!", inline=False)
        
        embed.set_footer(
            text=f"Cu·ªôc b√¨nh ch·ªçn ƒë∆∞·ª£c t·∫°o b·ªüi {ctx.author.display_name} ‚Ä¢ #HDBadminton", 
            icon_url=ctx.author.avatar.url if ctx.author.avatar else None
        )
        
        # G·ª≠i tin nh·∫Øn b√¨nh ch·ªçn
        poll_msg = await ctx.send(embed=embed)
        
        # Th√™m emoji ph·∫£n ·ª©ng
        for i in range(len(options)):
            await poll_msg.add_reaction(POLL_EMOJIS[i])
        
        logger.info(f"Cu·ªôc b√¨nh ch·ªçn ƒë∆∞·ª£c t·∫°o b·ªüi {ctx.author} trong #{ctx.channel}: {title}")
        
    except Exception as e:
        await handle_error(ctx, e, "vote")

@bot.command(name='votetime', aliases=['votegio', 'binhchongio'], help='T·∫°o b√¨nh ch·ªçn khung gi·ªù t·∫≠p (Ch·ªâ Admin)')
@is_admin()
async def vote_time(ctx, month: str, *time_options):
    """
    T·∫°o cu·ªôc b√¨nh ch·ªçn khung gi·ªù t·∫≠p c·∫ßu l√¥ng
    C√°ch d√πng: !votetime "Th√°ng 9" "8h00-10h00" "15h00-17h00"
    """
    try:
        if len(time_options) < 2:
            await ctx.send("‚ùå C·∫ßn √≠t nh·∫•t 2 khung gi·ªù ƒë·ªÉ b√¨nh ch·ªçn!")
            return
        
        if len(time_options) > 10:
            await ctx.send("‚ùå T·ªëi ƒëa 10 khung gi·ªù ƒë∆∞·ª£c ph√©p!")
            return
        
        # X√≥a tin nh·∫Øn l·ªánh
        await ctx.message.delete()
        
        # T·∫°o embed b√¨nh ch·ªçn chi ti·∫øt
        embed = discord.Embed(
            title=f"üè∏ B·∫¶U CH·ªåN KHUNG GI·ªú T·∫¨P - {month.upper()}",
            description="V√¨ thu√™ s√¢n trong th√°ng n√†y lu√¥n n√™n s√¢n s·∫Ω h·∫°n ch·∫ø h∆°n. C c√°c th√†nh vi√™n vui l√≤ng b√¨nh ch·ªçn khung gi·ªù ph√π h·ª£p nh·∫•t.",
            color=0xe74c3c,
            timestamp=datetime.utcnow()
        )
        
        # Th√™m c√°c khung gi·ªù
        option_text = ""
        for i, time_slot in enumerate(time_options):
            option_text += f"{POLL_EMOJIS[i]} **Th·ª© 7 - {time_slot}**\n"
        
        embed.add_field(name="‚è∞ C√°c khung gi·ªù:", value=option_text, inline=False)
        embed.add_field(name="üìç ƒê·ªãa ƒëi·ªÉm:", value="S√¢n Ho√†ng Hoa Th√°m", inline=True)
        embed.add_field(name="üìÖ Th·ªùi gian:", value="Th·ª© 7 h√†ng tu·∫ßn", inline=True)
        
        embed.add_field(
            name="üìù Ghi ch√∫:", 
            value="Th√°ng sau s·∫Ω c·ªë g·∫Øng m·ªü r·ªông khung gi·ªù cho c√°c th√†nh vi√™n c√≥ th·ªÉ c√¢n ƒë·ªëi th·ªùi gian c√° nh√¢n ƒë·ªÉ vote ·∫°.\n\nC·∫£m ∆°n m·ªçi ng∆∞·ªùi ƒë√£ tham gia b√¨nh ch·ªçn v√† ƒë·ªìng h√†nh c√πng CLB!", 
            inline=False
        )
        
        embed.set_footer(text="#HDBadminton #VoteL·ªãchT·∫≠p")
        
        # G·ª≠i cu·ªôc b√¨nh ch·ªçn
        poll_msg = await ctx.send("@everyone", embed=embed)
        
        # Th√™m ph·∫£n ·ª©ng
        for i in range(len(time_options)):
            await poll_msg.add_reaction(POLL_EMOJIS[i])
        
        logger.info(f"B√¨nh ch·ªçn khung gi·ªù ƒë∆∞·ª£c t·∫°o b·ªüi {ctx.author} cho {month}")
        
    except Exception as e:
        await handle_error(ctx, e, "votetime")

@bot.command(name='delete', aliases=['del', 'xoa'], help='X√≥a tin nh·∫Øn theo ID (Ch·ªâ Admin)')
@is_admin()
async def delete_message(ctx, message_id: int):
    """
    X√≥a tin nh·∫Øn theo ID
    C√°ch d√πng: !delete 123456789012345678
    """
    try:
        # Th·ª≠ l·∫•y v√† x√≥a tin nh·∫Øn
        message = await ctx.channel.fetch_message(message_id)
        await message.delete()
        
        # G·ª≠i x√°c nh·∫≠n v√† t·ª± ƒë·ªông x√≥a
        confirmation = await ctx.send(f"‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!")
        await asyncio.sleep(3)
        await confirmation.delete()
        
        # X√≥a tin nh·∫Øn l·ªánh
        await ctx.message.delete()
        
        logger.info(f"Tin nh·∫Øn {message_id} ƒë√£ ƒë∆∞·ª£c x√≥a b·ªüi {ctx.author} trong #{ctx.channel}")
        
    except discord.NotFound:
        await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y tin nh·∫Øn! H√£y ƒë·∫£m b·∫£o ID tin nh·∫Øn ƒë√∫ng v√† trong k√™nh n√†y.")
    except discord.Forbidden:
        await ctx.send("‚ùå Bot kh√¥ng c√≥ quy·ªÅn x√≥a tin nh·∫Øn ƒë√≥!")
    except Exception as e:
        await handle_error(ctx, e, "delete")

@bot.command(name='help', aliases=['trogiup', 'huongdan'], help='Hi·ªÉn th·ªã c√°c l·ªánh c√≥ s·∫µn')
async def help_command(ctx):
    """
    Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p cho c√°c l·ªánh c√≥ s·∫µn
    """
    try:
        embed = discord.Embed(
            title="üè∏ L·ªánh Bot HDBadminton",
            description="ƒê√¢y l√† c√°c l·ªánh c√≥ s·∫µn:",
            color=0xe74c3c
        )
        
        # L·ªánh c√¥ng khai
        embed.add_field(
            name="üìã L·ªánh Chung",
            value="‚Ä¢ `!help` ho·∫∑c `!trogiup` - Hi·ªÉn th·ªã tin nh·∫Øn tr·ª£ gi√∫p n√†y\n‚Ä¢ `!vote \"c√¢u h·ªèi\" \"l·ª±a ch·ªçn 1\" \"l·ª±a ch·ªçn 2\"` - T·∫°o cu·ªôc b√¨nh ch·ªçn\n‚Ä¢ `!status` - Ki·ªÉm tra tr·∫°ng th√°i bot",
            inline=False
        )
        
        # L·ªánh admin (ch·ªâ hi·ªÉn th·ªã n·∫øu ng∆∞·ªùi d√πng l√† admin)
        if ctx.author.guild_permissions.administrator or ctx.author.guild_permissions.manage_messages:
            embed.add_field(
                name="üîí L·ªánh Admin",
                value="‚Ä¢ `!announce <tin nh·∫Øn>` ho·∫∑c `!thongbao` - ƒêƒÉng th√¥ng b√°o\n‚Ä¢ `!votetime \"th√°ng\" \"gi·ªù 1\" \"gi·ªù 2\"` - T·∫°o b√¨nh ch·ªçn khung gi·ªù\n‚Ä¢ `!delete <id tin nh·∫Øn>` ho·∫∑c `!xoa` - X√≥a tin nh·∫Øn theo ID",
                inline=False
            )
        
        embed.add_field(
            name="‚ÑπÔ∏è M·∫πo",
            value="‚Ä¢ S·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p cho c√°c t·ª´ nhi·ªÅu t·ª´\n‚Ä¢ ID tin nh·∫Øn c√≥ th·ªÉ ƒë∆∞·ª£c sao ch√©p b·∫±ng c√°ch nh·∫•p chu·ªôt ph·∫£i (c·∫ßn b·∫≠t Developer Mode)\n‚Ä¢ S·ª≠ d·ª•ng `!votetime` ƒë·ªÉ t·∫°o b√¨nh ch·ªçn khung gi·ªù t·∫≠p chuy√™n bi·ªát",
            inline=False
        )
        
        embed.set_footer(text="HDBadminton Bot | Qu·∫£n l√Ω ho·∫°t ƒë·ªông c√¢u l·∫°c b·ªô c·∫ßu l√¥ng c·ªßa b·∫°n")
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        await handle_error(ctx, e, "help")

@bot.command(name='status', aliases=['trangthai'], help='Ki·ªÉm tra tr·∫°ng th√°i bot v√† th·ªëng k√™')
async def status(ctx):
    """
    Hi·ªÉn th·ªã tr·∫°ng th√°i bot v√† th·ªëng k√™ c∆° b·∫£n
    """
    try:
        embed = discord.Embed(
            title="ü§ñ Tr·∫°ng Th√°i Bot",
            color=0x2ecc71,
            timestamp=datetime.utcnow()
        )
        
        # Th√¥ng tin bot
        embed.add_field(name="T√™n Bot", value=bot.user.name, inline=True) # type: ignore
        embed.add_field(name="M√°y ch·ªß", value=len(bot.guilds), inline=True)
        embed.add_field(name="Ng∆∞·ªùi d√πng", value=len(set(bot.get_all_members())), inline=True)
        embed.add_field(name="Ti·ªÅn t·ªë l·ªánh", value=bot.command_prefix, inline=True)
        embed.add_field(name="ƒê·ªô tr·ªÖ", value=f"{round(bot.latency * 1000)}ms", inline=True)
        
        embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else None) # type: ignore
        embed.set_footer(text="Tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra")
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        await handle_error(ctx, e, "status")

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'HDBadminton Bot is running!')
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        return  # Suppress HTTP logs

def run_web_server():
    """Run a simple web server to keep Render service alive"""
    port = int(os.environ.get('PORT', 8080))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"Web server ƒëang ch·∫°y tr√™n c·ªïng {port}")
    server.serve_forever()

# Run the bot
if __name__ == "__main__":
    try:
        # Start web server in background thread for Render
        if os.environ.get('RENDER'):
            logger.info("Kh·ªüi ƒë·ªông web server cho Render...")
            web_thread = threading.Thread(target=run_web_server, daemon=True)
            web_thread.start()
        
        logger.info("üè∏ ƒêang kh·ªüi ƒë·ªông HDBadminton Bot...")
        bot.run(token, log_handler=None, log_level=logging.INFO)
    except KeyboardInterrupt:
        logger.info("Ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫Øt bot")
    except Exception as e:
        logger.error(f"Bot b·ªã l·ªói: {e}")
        sys.exit(1)